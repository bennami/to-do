{"version":3,"sources":["components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","listItems","items","map","item","className","key","text","onClick","deleteItem","App","state","currentItem","handleInput","bind","addItem","e","preventDefault","newItem","this","setState","filteredItems","filter","target","value","Date","now","id","onSubmit","type","placeholder","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSAqBeA,MAlBf,SAAcC,GAEV,IACMC,EADQD,EAAME,MACIC,KAAK,SAAAC,GACzB,OAAO,yBAAKC,UAAW,OAAQC,IAAKF,EAAKE,KACjC,2BAAIF,EAAKG,KAAT,OAAkB,8BAAM,4BAAQC,QAAS,kBAAKR,EAAMS,WAAWL,EAAKE,OAA5C,WAKpC,OACI,yBAAKD,UAAU,cACdJ,IC0EMS,E,kDApFX,WAAYV,GAAQ,IAAD,8BACf,cAAMA,IACDW,MAAM,CACPT,MAAM,GACNU,YACI,CACIL,KAAM,GACND,IAAK,KAKjB,EAAKO,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKL,WAAa,EAAKA,WAAWK,KAAhB,gBAdH,E,oDAsBXE,GAEJA,EAAEC,iBACF,IAAMC,EAAUC,KAAKR,MAAMC,YAC3B,GAAmB,KAAhBM,EAAQX,KAAY,CACnB,IAAML,EAAK,sBAAOiB,KAAKR,MAAMT,OAAlB,CAAyBgB,IACpCC,KAAKC,SAAS,CACVlB,MAAOA,EACPU,YAAa,CACTL,KAAM,GACND,IAAK,S,iCAONA,GACX,IAAMe,EAAgBF,KAAKR,MAAMT,MAAMoB,QAAO,SAAAlB,GAAI,OAClDA,EAAKE,MAAQA,KACba,KAAKC,SAAS,CACVlB,MAAMmB,M,kCAKFL,GACRG,KAAKC,SAAS,CACVR,YAAa,CACTL,KAAMS,EAAEO,OAAOC,MACflB,IAAKmB,KAAKC,W,+BAOjB,OACG,yBAAKrB,UAAU,aACX,qCAEA,0BAAMsB,GAAG,OAAOC,SAAUT,KAAKJ,SAC3B,yBAAKV,UAAW,kBACZ,2BACIA,UAAW,UACXwB,KAAK,OACLC,YAAa,mBACbN,MAAOL,KAAKR,MAAMC,YAAYL,KAC9BwB,SAAUZ,KAAKN,cAEnB,4BAAQgB,KAAM,UAAd,OAIZ,kBAAC,EAAD,CAAM3B,MAASiB,KAAKR,MAAMT,MAAOO,WAAaU,KAAKV,kB,GA7E7CuB,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.160135e8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../todo.css\"\n\nfunction Todo(props) {\n\n    const items = props.items;\n    const listItems = items.map( item => {\n        return <div className={'list'} key={item.key}>\n                <p>{item.text}jjj <span><button onClick={()=> props.deleteItem(item.key)}>X</button></span></p>\n\n               </div>\n\n    });\n    return(\n        <div className=\"todo-items\">\n        {listItems}\n        </div>\n    );\n\n}\n\nexport default Todo;","import React ,{useState} from 'react';\nimport './App.css';\nimport Todo from \"./components/Todo\";\n\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state={\n            items:[],\n            currentItem:\n                {\n                    text: '',\n                    key: ''\n                }\n\n        };\n\n        this.handleInput = this.handleInput.bind(this);\n        this.addItem = this.addItem.bind(this);\n        this.deleteItem = this.deleteItem.bind(this)\n    }\n//const [ items,  setItems  = useState([]);\n//const [ currentItem , setCurrentItem] = useState({\n// text:'',\n// key:''\n// })\n\n    addItem(e){\n        //this prevents page from refreshing\n        e.preventDefault();\n        const newItem = this.state.currentItem;\n        if(newItem.text !==\"\") {\n            const items = [...this.state.items, newItem];\n            this.setState({\n                items: items,\n                currentItem: {\n                    text: '',\n                    key: ''\n                }\n                })\n            }\n\n        }\n\n        deleteItem(key){\n        const filteredItems = this.state.items.filter(item =>\n        item.key !== key);\n        this.setState({\n            items:filteredItems\n        })\n\n        }\n\n    handleInput(e){\n        this.setState({\n            currentItem: {\n                text: e.target.value,\n                key: Date.now()\n            }\n        })\n    }\n\n    render (){\n\n         return (\n            <div className=\"todo-list\">\n                <h1>To Do</h1>\n\n                <form id=\"form\" onSubmit={this.addItem}>\n                    <div className={\"form-container\"}>\n                        <input\n                            className={\"addToDo\"}\n                            type=\"text\"\n                            placeholder={\"enter  you  task\"}\n                            value={this.state.currentItem.text}\n                            onChange={this.handleInput}\n                        />\n                        <button type={\"submit\"}>+</button>\n                    </div>\n                </form>\n\n            <Todo items = {this.state.items} deleteItem ={this.deleteItem}/>\n            </div>\n            );\n    }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}